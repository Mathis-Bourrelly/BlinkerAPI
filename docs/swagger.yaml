openapi: 3.0.0
info:
  title: Blinker API
  description: Documentation globale de l'API Blinker
  version: 1.0.0

servers:
  - url: "http://localhost:3011/"
  - url: "https://dev.blinker.eterny.fr/"

tags:
  - name: Blinks
    description: Opérations liées aux Blinks
  - name: Follow
    description: Opérations liées aux abonnements
  - name: Profiles
    description: Opérations liées aux profils utilisateurs
  - name: Users
    description: Gestion des utilisateurs
  - name: Authentification
    description: Gestion des connexions
  - name: Interactions
    description: Gestion des likes et dislikes sur les Blinks

paths:
  # ---------------------------
  # Endpoints Blinks
  # ---------------------------

  /blinks:
    get:
      tags:
        - Blinks
      summary: Récupérer les blinks avec pagination et filtrage par utilisateur
      description: |
        Récupère une liste paginée de blinks, triés par date de création (du plus récent au plus ancien).
        Possibilité de filtrer les résultats en fonction de l'utilisateur qui a créé le blink.
      security:
        - BearerAuth: [ ]
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            default: 1
          description: Numéro de la page à récupérer.
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 10
          description: Nombre d'éléments par page.
        - name: userId
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: ID de l'utilisateur pour filtrer les blinks (optionnel).
      responses:
        '200':
          description: Liste paginée des blinks retournée avec succès.
          content:
            application/json:
              schema:
                type: object
                properties:
                  page:
                    type: integer
                    example: 1
                  limit:
                    type: integer
                    example: 10
                  total:
                    type: integer
                    example: 100
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Blink'
        '400':
          description: Requête invalide (ex. paramètre non valide).
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Paramètres de pagination invalides."
        '500':
          description: Erreur interne du serveur.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Erreur interne du serveur"

    post:
      tags:
        - Blinks
      summary: Créer un nouveau Blink
      description: Création d'un Blink avec un contenu, l'utilisateur est déterminé via le token.
      security:
        - BearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - contents
              properties:
                contents:
                  type: array
                  items:
                    type: object
                    properties:
                      contentType:
                        type: string
                        enum: [ "text", "image", "video" ]
                        example: "text"
                      content:
                        type: string
                        example: "Ceci est un blink avec du texte."
                      position:
                        type: integer
                        example: 1
      responses:
        '201':
          description: Blink créé avec succès.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Blink'
        '400':
          description: Données invalides.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Données invalides"
        '500':
          description: Erreur interne du serveur.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Erreur interne du serveur"
  /blinks/search:
    get:
      tags:
        - Blinks
      summary: Rechercher dans les blinks et les profils d'utilisateurs
      description: |
        Effectue une recherche sur les profils (display_name, username) et les blinks (contenu texte uniquement).
      security:
        - BearerAuth: [ ]
      parameters:
        - name: query
          in: query
          required: true
          schema:
            type: string
          description: Texte à rechercher.
        - name: page
          in: query
          required: false
          schema:
            type: integer
            default: 1
          description: Numéro de la page à récupérer.
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 10
          description: Nombre d'éléments par page.
      responses:
        '200':
          description: Résultats de la recherche.
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      type: object
                      properties:
                        userID:
                          type: string
                          example: "123e4567-e89b-12d3-a456-426614174000"
                        display_name:
                          type: string
                          example: "John Doe"
                        username:
                          type: string
                          example: "john_doe"
                        avatar_url:
                          type: string
                          example: "https://example.com/avatar.jpg"
                  blinks:
                    type: array
                    items:
                      type: object
                      properties:
                        content:
                          type: string
                          example: "Ceci est un blink intéressant."
                        blink:
                          type: object
                          properties:
                            blinkID:
                              type: string
                              example: "19e4cfbe-ea7d-4733-9b21-25bc6b77578a"
                            createdAt:
                              type: string
                              format: date-time
                            profile:
                              type: object
                              properties:
                                display_name:
                                  type: string
                                  example: "John Doe"
                                username:
                                  type: string
                                  example: "john_doe"
                                avatar_url:
                                  type: string
                                  example: "https://example.com/avatar.jpg"
        '400':
          description: Requête invalide.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Le paramètre 'query' est requis."
        '500':
          description: Erreur interne du serveur.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Erreur interne du serveur"

  /blinks/{blinkID}:
    get:
      tags:
        - Blinks
      summary: Récupérer un blink par ID
      description: Récupère un blink en fonction de son identifiant.
      security:
        - BearerAuth: []
      parameters:
        - name: blinkID
          in: path
          required: true
          schema:
            type: string
          description: ID du blink à récupérer.
      responses:
        '200':
          description: Blink récupéré avec succès.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Blink'
        '404':
          description: Blink non trouvé.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Blink non trouvé"
        '500':
          description: Erreur interne du serveur.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Erreur interne du serveur"
    put:
      tags:
        - Blinks
      summary: Mettre à jour un blink existant
      description: Met à jour les contenus d'un blink.
      security:
        - BearerAuth: []
      parameters:
        - name: blinkID
          in: path
          required: true
          schema:
            type: string
          description: ID du blink à mettre à jour.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - contents
              properties:
                contents:
                  type: array
                  items:
                    type: string
                  example: ["Nouveau contenu"]
      responses:
        '200':
          description: Blink mis à jour avec succès.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Blink'
        '400':
          description: Données invalides.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Données invalides"
        '500':
          description: Erreur interne du serveur.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Erreur interne du serveur"
    delete:
      tags:
        - Blinks
      summary: Supprimer un blink par ID
      description: Supprime un blink en fonction de son identifiant.
      security:
        - BearerAuth: []
      parameters:
        - name: blinkID
          in: path
          required: true
          schema:
            type: string
          description: ID du blink à supprimer.
      responses:
        '204':
          description: Blink supprimé avec succès (aucun contenu renvoyé).
        '500':
          description: Erreur interne du serveur.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Erreur interne du serveur"
  /blinks/remaining-time/{blinkID}:
    get:
      tags:
        - Blinks
      summary: Vérifier la durée de vie restante d'un Blink
      description: Retourne le temps restant avant l'expiration d'un Blink.
      security:
        - BearerAuth: [ ]
      parameters:
        - name: blinkID
          in: path
          required: true
          schema:
            type: string
          description: ID du Blink dont on veut connaître la durée de vie restante.
      responses:
        '200':
          description: Durée de vie restante récupérée avec succès.
          content:
            application/json:
              schema:
                type: object
                properties:
                  blinkID:
                    type: string
                    example: "blink123"
                  remainingTime:
                    type: number
                    example: 43200
        '404':
          description: Blink non trouvé.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Blink non trouvé"
        '500':
          description: Erreur interne du serveur.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Erreur interne du serveur"

  /blinks/expired:
    delete:
      tags:
        - Blinks
      summary: Supprimer manuellement les Blinks expirés
      description: Supprime tous les Blinks dont la durée de vie est écoulée.
      security:
        - BearerAuth: [ ]
      responses:
        '200':
          description: Blinks expirés supprimés avec succès.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Blinks expirés supprimés avec succès."
        '500':
          description: Erreur interne du serveur.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Erreur interne du serveur"


  # ---------------------------
  # Endpoints Follow
  # ---------------------------
  /follows/{targetUserID}:
    post:
      tags:
        - Follow
      summary: Suivre un utilisateur
      description: Permet à un utilisateur authentifié de suivre un autre utilisateur.
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: targetUserID
          required: true
          schema:
            type: string
          description: ID de l'utilisateur à suivre.
      responses:
        '200':
          description: L'utilisateur est maintenant suivi.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Utilisateur suivi"
        '400':
          description: Erreur de validation.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Erreur de validation"
        '404':
          description: Utilisateur non trouvé.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Utilisateur non trouvé"

  /unfollow/{targetUserID}:
    delete:
      tags:
        - Follow
      summary: Se désabonner d'un utilisateur
      description: Permet à un utilisateur authentifié d'arrêter de suivre un autre utilisateur.
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: targetUserID
          required: true
          schema:
            type: string
          description: ID de l'utilisateur à ne plus suivre.
      responses:
        '200':
          description: L'utilisateur a été désabonné avec succès.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Désabonnement réussi"
        '400':
          description: Erreur de validation.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Erreur de validation"
        '404':
          description: Utilisateur non trouvé.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Utilisateur non trouvé"

  /follows/followers/{userID}:
    get:
      tags:
        - Follow
      summary: Obtenir la liste des abonnés d'un utilisateur
      description: Renvoie la liste paginée des utilisateurs qui suivent un utilisateur donné, avec des informations simplifiées sur chaque abonné (avatar, nom et nom d'utilisateur).
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: userID
          required: true
          schema:
            type: string
          description: ID de l'utilisateur cible.
        - in: query
          name: page
          required: false
          schema:
            type: integer
            default: 1
          description: Numéro de la page à retourner.
        - in: query
          name: limit
          required: false
          schema:
            type: integer
            default: 10
          description: Nombre d'éléments par page.
      responses:
        '200':
          description: Liste paginée des abonnés retournée avec succès.
          content:
            application/json:
              schema:
                type: object
                properties:
                  page:
                    type: integer
                    example: 1
                  limit:
                    type: integer
                    example: 10
                  total:
                    type: integer
                    example: 42
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        avatar_url:
                          type: string
                          example: "https://example.com/avatar.jpg"
                        name:
                          type: string
                          example: "John Doe"
                        username:
                          type: string
                          example: "johndoe"
        '404':
          description: Utilisateur non trouvé.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Utilisateur non trouvé"

  /follows/following/{userID}:
    get:
      tags:
        - Follow
      summary: Obtenir la liste des utilisateurs suivis par un utilisateur
      description: Renvoie la liste paginée des utilisateurs suivis par un utilisateur donné, avec des informations simplifiées sur chaque utilisateur suivi (avatar, nom et nom d'utilisateur).
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: userID
          required: true
          schema:
            type: string
          description: ID de l'utilisateur cible.
        - in: query
          name: page
          required: false
          schema:
            type: integer
            default: 1
          description: Numéro de la page à retourner.
        - in: query
          name: limit
          required: false
          schema:
            type: integer
            default: 10
          description: Nombre d'éléments par page.
      responses:
        '200':
          description: Liste paginée des utilisateurs suivis retournée avec succès.
          content:
            application/json:
              schema:
                type: object
                properties:
                  page:
                    type: integer
                    example: 1
                  limit:
                    type: integer
                    example: 10
                  total:
                    type: integer
                    example: 35
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        avatar_url:
                          type: string
                          example: "https://example.com/avatar.jpg"
                        name:
                          type: string
                          example: "Jane Doe"
                        username:
                          type: string
                          example: "janedoe"
        '404':
          description: Utilisateur non trouvé.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Utilisateur non trouvé"

  # ---------------------------
  # Endpoints Authentification
  # ---------------------------
  /status:
    get:
      tags:
        - Authentification
      summary: Vérifier le statut du service
      description: Retourne le statut du service.
      responses:
        '200':
          description: Service prêt.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "ready"

  /login:
    post:
      tags:
        - Authentification
      summary: Authentification via email/mot de passe
      description: Authentifie un utilisateur à l'aide de son email et de son mot de passe.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: "test@test.com"
                password:
                  type: string
                  example: "test"
      responses:
        '200':
          description: Authentification réussie.
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: "jwt_token"
        '400':
          description: Erreur de validation ou d'authentification.
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: object

  /checkToken:
    post:
      tags:
        - Authentification
      summary: Vérifier un token JWT
      description: Vérifie la validité d'un token JWT.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - token
              properties:
                token:
                  type: string
                  example: "jwt_token"
      responses:
        '200':
          description: Token valide.
          content:
            application/json:
              schema:
                type: object
                properties:
                  valid:
                    type: boolean
                    example: true
        '400':
          description: Token invalide.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Token invalide"

  /login/google:
    post:
      tags:
        - Authentification
      summary: Authentification avec Google OAuth
      description: Authentifie un utilisateur via Google OAuth.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - id_token
              properties:
                id_token:
                  type: string
                  example: "google_id_token"
      responses:
        '200':
          description: Authentification réussie.
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: "jwt_token"
        '400':
          description: Erreur d'authentification.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string

  # ---------------------------
  # Endpoints Profiles
  # ---------------------------
  /profiles:
    post:
      tags:
        - Profiles
      summary: Créer un profil pour un utilisateur
      description: Associe un profil à un utilisateur existant avec un username, une bio et une photo.
      security:
        - BearerAuth: [ ]
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                avatar:
                  type: string
                  format: binary
                  description: Fichier image de l'avatar à uploader.
                userID:
                  type: string
                  format: uuid
                  example: "550e8400-e29b-41d4-a716-446655440000"
                username:
                  type: string
                  example: "user123"
                bio:
                  type: string
                  example: "Développeur full-stack passionné."
      responses:
        '201':
          description: Profil créé avec succès.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
        '400':
          description: Erreur de validation.
        '409':
          description: Username déjà utilisé.
        '500':
          description: Erreur interne.

  /profiles/{userID}:
    get:
      tags:
        - Profiles
      summary: Récupérer le profil d'un utilisateur
      description: Retourne le profil d'un utilisateur à partir de son userID.
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: userID
          required: true
          schema:
            type: string
            format: uuid
          example: "550e8400-e29b-41d4-a716-446655440000"
      responses:
        '200':
          description: Profil récupéré avec succès.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
        '404':
          description: Profil non trouvé.
        '500':
          description: Erreur interne.

  /profiles/upload-avatar/{userID}:
    post:
      tags:
        - Profiles
      summary: Uploader un avatar pour un utilisateur
      description: Met à jour l'avatar d'un utilisateur en uploadant une nouvelle image.
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: userID
          schema:
            type: string
            format: uuid
          required: true
          description: UUID de l'utilisateur
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                avatar:
                  type: string
                  format: binary
                  description: Fichier image de l'avatar à uploader.
      responses:
        '200':
          description: Avatar uploadé avec succès.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Avatar uploaded successfully"
                  avatarUrl:
                    type: string
                    example: "/uploads/avatar.png"
        '400':
          description: Erreur de validation ou fichier manquant.
        '404':
          description: Utilisateur non trouvé.
        '500':
          description: Erreur interne du serveur.

  # ---------------------------
  # Endpoints Users
  # ---------------------------
  /users/register:
    post:
      tags:
        - Users
      summary: Créer un nouvel utilisateur
      description: Enregistrer un nouvel utilisateur avec un email, un mot de passe et un nom.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: "user@example.com"
                password:
                  type: string
                  example: "Password123!"
                name:
                  type: string
                  example: "John Doe"
      responses:
        '201':
          description: Utilisateur créé avec succès.
        '400':
          description: Validation échouée.
        '409':
          description: Conflit, utilisateur existant.

  /users:
    get:
      tags:
        - Users
      summary: Obtenir tous les utilisateurs
      description: Récupère une liste de tous les utilisateurs enregistrés.
      security:
        - BearerAuth: [ ]
      responses:
        '200':
          description: Liste des utilisateurs récupérée avec succès.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '500':
          description: Erreur interne du serveur.
    post:
      tags:
        - Users
      summary: Créer un utilisateur
      description: Ajoute un nouvel utilisateur avec un email, un mot de passe sécurisé et un nom.
      security:
        - BearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  description: Adresse email de l'utilisateur
                password:
                  type: string
                  description: Mot de passe sécurisé (minimum 12 caractères, majuscules, minuscules, chiffres et symboles requis)
                name:
                  type: string
                  description: Nom de l'utilisateur
      responses:
        '201':
          description: Utilisateur créé avec succès.
        '400':
          description: Erreur de validation.
        '409':
          description: Conflit - l'utilisateur existe déjà.

  /users/{id}:
    get:
      tags:
        - Users
      summary: Obtenir un utilisateur par ID
      description: Récupère un utilisateur à partir de son ID unique.
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID de l'utilisateur à rechercher.
      responses:
        '200':
          description: Utilisateur trouvé.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: Utilisateur non trouvé.
        '500':
          description: Erreur interne du serveur.
    put:
      tags:
        - Users
      summary: Mettre à jour un utilisateur
      description: Met à jour les informations d'un utilisateur (nom, email, mot de passe, etc.).
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID de l'utilisateur à mettre à jour.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Nouveau nom de l'utilisateur
                email:
                  type: string
                  format: email
                  description: Nouvelle adresse email
                password:
                  type: string
                  description: Nouveau mot de passe (au moins 8 caractères)
      responses:
        '204':
          description: Utilisateur mis à jour avec succès.
        '400':
          description: Erreur de validation.
        '404':
          description: Utilisateur non trouvé.
    delete:
      tags:
        - Users
      summary: Supprimer un utilisateur par ID
      description: Supprime un utilisateur en utilisant son ID.
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID de l'utilisateur.
      responses:
        '204':
          description: Utilisateur supprimé avec succès.
        '404':
          description: Utilisateur non trouvé.
        '500':
          description: Erreur interne du serveur.

  /users/email/{email}:
    get:
      tags:
        - Users
      summary: Obtenir un utilisateur par email
      description: Récupère un utilisateur à partir de son adresse email.
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: email
          required: true
          schema:
            type: string
          description: Email de l'utilisateur à rechercher.
      responses:
        '200':
          description: Utilisateur trouvé.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: Utilisateur non trouvé.
        '500':
          description: Erreur interne du serveur.

  /users/confirm/{token}:
    get:
      tags:
        - Users
      summary: Confirmer un compte utilisateur
      description: Vérifie un compte utilisateur à l'aide d'un token de confirmation.
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: token
          required: true
          schema:
            type: string
          description: Token de confirmation.
      responses:
        '200':
          description: Compte vérifié avec succès.
        '400':
          description: Lien de confirmation invalide ou expiré.
        '404':
          description: Utilisateur non trouvé.

  /users/send-test-email/:
    post:
      tags:
        - Users
      summary: Envoyer un email de test
      description: Envoie un email de confirmation à l'utilisateur spécifié.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userID:
                  type: string
                  example: "user123"
                subject:
                  type: string
                  example: "Confirmation de votre compte"
                text:
                  type: string
                  example: "Cliquez sur le lien pour confirmer votre compte."
      responses:
        '200':
          description: E-mail de confirmation envoyé avec succès.
        '400':
          description: Erreur de validation.
        '500':
          description: Erreur lors de l'envoi de l'e-mail.

  /users/grant-admin/{userID}:
    post:
      tags:
        - Users
      summary: Accorder le rôle d'administrateur à un utilisateur
      description: Permet à un administrateur de promouvoir un utilisateur au rôle d'administrateur.
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: userID
          required: true
          schema:
            type: string
            format: uuid
          description: ID de l'utilisateur à promouvoir.
      responses:
        '200':
          description: L'utilisateur a été promu administrateur avec succès.
        '403':
          description: Accès refusé - seul un administrateur peut accorder ce rôle.
        '404':
          description: Utilisateur non trouvé.

  /users/reset-password:
    post:
      tags:
        - Users
      summary: Demander une réinitialisation de mot de passe
      description: Envoie un email de réinitialisation de mot de passe si l'utilisateur existe.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "user@example.com"
      responses:
        '200':
          description: Email de réinitialisation envoyé si l'utilisateur existe.
        '400':
          description: Validation échouée.
        '404':
          description: Utilisateur non trouvé.

  /users/reset-password/{token}:
    post:
      tags:
        - Users
      summary: Réinitialiser le mot de passe
      description: Permet à un utilisateur de définir un nouveau mot de passe après avoir demandé une réinitialisation.
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: token
          required: true
          schema:
            type: string
          description: Token de réinitialisation du mot de passe.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                newPassword:
                  type: string
                  example: "SecurePassword123!"
      responses:
        '200':
          description: Mot de passe mis à jour avec succès.
        '400':
          description: Erreur de validation ou token invalide.
        '404':
          description: Utilisateur non trouvé.
  # ---------------------------
  # Endpoints Blinks
  # ---------------------------

  /interactions/like/{postID}:
    post:
      tags:
        - Interactions
      summary: Liker un Blink
      description: Ajoute un like à un Blink ou annule un like existant.
      security:
        - BearerAuth: [ ]
      parameters:
        - name: postID
          in: path
          required: true
          schema:
            type: string
          description: ID du Blink à liker.
      responses:
        '200':
          description: Like ajouté, supprimé ou mis à jour avec succès.
          content:
            application/json:
              schema:
                type: object
                properties:
                  created:
                    type: boolean
                    example: true
                  removed:
                    type: boolean
                    example: false
                  updated:
                    type: boolean
                    example: false
        '401':
          description: Utilisateur non authentifié.
        '500':
          description: Erreur interne du serveur.

  /interactions/dislike/{postID}:
    post:
      tags:
        - Interactions
      summary: Disliker un Blink
      description: Ajoute un dislike à un Blink ou annule un dislike existant.
      security:
        - BearerAuth: [ ]
      parameters:
        - name: postID
          in: path
          required: true
          schema:
            type: string
          description: ID du Blink à disliker.
      responses:
        '200':
          description: Dislike ajouté, supprimé ou mis à jour avec succès.
          content:
            application/json:
              schema:
                type: object
                properties:
                  created:
                    type: boolean
                    example: true
                  removed:
                    type: boolean
                    example: false
                  updated:
                    type: boolean
                    example: false
        '401':
          description: Utilisateur non authentifié.
        '500':
          description: Erreur interne du serveur.

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: 'JWT'
      in: 'header'
      name: 'Authorization'

  schemas:
    Blink:
      type: object
      properties:
        id:
          type: string
          example: "blink123"
        userID:
          type: string
          example: "user123"
        contents:
          type: array
          items:
            type: string
          example: ["Contenu du blink"]
    User:
      type: object
      properties:
        id:
          type: string
          example: "user123"
        email:
          type: string
          format: email
          example: "user@example.com"
    Profile:
      type: object
      properties:
        userID:
          type: string
          format: uuid
          example: "550e8400-e29b-41d4-a716-446655440000"
        display_name:
          type: string
          example: "John Doe"
        username:
          type: string
          example: "user123"
        bio:
          type: string
          example: "Développeur full-stack passionné."
        avatar_url:
          type: string
          example: "https://example.com/avatar.png"
        score:
          type: integer
          example: 0
