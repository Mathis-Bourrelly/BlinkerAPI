// Importer les associations avant d'utiliser les mod√®les
require('../src/models/associations');

const { Tags } = require('../src/models/associations');
const TagsService = require('../src/services/tags.service');

const seedTags = async () => {
    try {
        console.log('üè∑Ô∏è D√©but du seeding des tags...');

        // Liste de tags pr√©d√©finis pour diff√©rentes cat√©gories
        const predefinedTags = [
            // Technologie
            'technologie', 'innovation', 'web', 'mobile', 'ia', 'blockchain', 'crypto',
            'd√©veloppement', 'programmation', 'javascript', 'python', 'react', 'nodejs',
            'api', 'database', 'cloud', 'devops', 'cybers√©curit√©', 'opensource',
            
            // Lifestyle
            'lifestyle', 'voyage', 'food', 'cuisine', 'restaurant', 'recette',
            'fitness', 'sport', 'yoga', 'meditation', 'wellness', 'sant√©',
            'mode', 'style', 'beaut√©', 'diy', 'd√©coration', 'maison',
            
            // Culture & Divertissement
            'culture', 'art', 'musique', 'cin√©ma', 'livre', 'lecture',
            'gaming', 'jeux', 'streaming', 'podcast', 's√©rie', 'film',
            'photographie', 'design', 'cr√©ativit√©', 'inspiration',
            
            // Business & Carri√®re
            'business', 'startup', 'entrepreneur', 'marketing', 'finance',
            'carri√®re', 'formation', '√©ducation', 'productivit√©', 'leadership',
            'networking', 'freelance', 'remote', 'management',
            
            // Nature & Environnement
            'nature', 'environnement', '√©cologie', 'durable', 'bio',
            'jardinage', 'animaux', 'climat', 'recyclage', 'green',
            
            // Actualit√©s & Soci√©t√©
            'actualit√©s', 'politique', 'soci√©t√©', '√©conomie', 'science',
            'recherche', 'd√©couverte', 'histoire', 'g√©ographie', 'monde',
            
            // Hobbies & Loisirs
            'hobby', 'collection', 'bricolage', 'artisanat', 'peinture',
            'musique', 'instrument', 'danse', 'th√©√¢tre', '√©criture',
            'blog', 'vlog', 'tutorial', 'tips', 'astuce'
        ];

        let tagsCreated = 0;
        let tagsSkipped = 0;

        console.log(`üìä Tentative de cr√©ation de ${predefinedTags.length} tags...`);

        for (const tagName of predefinedTags) {
            try {
                // V√©rifier si le tag existe d√©j√†
                const existingTag = await Tags.findOne({
                    where: { name: tagName.toLowerCase() }
                });

                if (existingTag) {
                    console.log(`‚ö†Ô∏è Tag "${tagName}" existe d√©j√†`);
                    tagsSkipped++;
                    continue;
                }

                // Cr√©er le tag en utilisant le repository
                const { tag, created } = await require('../src/repository/tags.repository').findOrCreateTag(tagName);
                
                if (created) {
                    console.log(`‚úÖ Tag cr√©√©: "${tag.name}" (${tag.tagID})`);
                    tagsCreated++;
                } else {
                    console.log(`‚ö†Ô∏è Tag "${tagName}" existait d√©j√†`);
                    tagsSkipped++;
                }

                // Petite pause pour √©viter de surcharger la base
                await new Promise(resolve => setTimeout(resolve, 50));

            } catch (error) {
                console.error(`‚ùå Erreur lors de la cr√©ation du tag "${tagName}":`, error.message);
            }
        }

        console.log('\nüìä R√©sum√© du seeding des tags:');
        console.log(`‚úÖ Tags cr√©√©s: ${tagsCreated}`);
        console.log(`‚ö†Ô∏è Tags ignor√©s (d√©j√† existants): ${tagsSkipped}`);
        console.log('üéâ Seeding des tags termin√© avec succ√®s !');

        // Afficher quelques statistiques
        const totalTags = await Tags.count();
        console.log(`üìà Total des tags en base: ${totalTags}`);

        // Afficher quelques tags cr√©√©s
        const sampleTags = await Tags.findAll({
            limit: 10,
            order: [['createdAt', 'DESC']]
        });

        console.log('\nüè∑Ô∏è Derniers tags cr√©√©s:');
        sampleTags.forEach(tag => {
            console.log(`  - ${tag.name} (${tag.tagID})`);
        });

        return { tagsCreated, tagsSkipped, totalTags };

    } catch (error) {
        console.error('‚ùå Erreur lors du seeding des tags:', error);
        throw error;
    }
};

/**
 * Fonction utilitaire pour obtenir des tags al√©atoires pour un blink
 * @param {number} maxTags - Nombre maximum de tags (d√©faut: 3)
 * @returns {Promise<string[]>} - Tableau de noms de tags
 */
const getRandomTagsForBlink = async (maxTags = 3) => {
    try {
        // R√©cup√©rer tous les tags disponibles
        const allTags = await Tags.findAll({
            attributes: ['name']
        });

        if (allTags.length === 0) {
            return [];
        }

        // D√©terminer le nombre de tags √† assigner (0 √† maxTags)
        const numTags = Math.floor(Math.random() * (maxTags + 1));
        
        if (numTags === 0) {
            return [];
        }

        // M√©langer les tags et en prendre un nombre al√©atoire
        const shuffledTags = allTags.sort(() => 0.5 - Math.random());
        const selectedTags = shuffledTags.slice(0, numTags);

        return selectedTags.map(tag => tag.name);

    } catch (error) {
        console.error('‚ùå Erreur lors de la r√©cup√©ration des tags al√©atoires:', error);
        return [];
    }
};

/**
 * Fonction utilitaire pour obtenir des tags th√©matiques selon le type de contenu
 * @param {string} contentType - Type de contenu ('text', 'image', 'video')
 * @param {string} content - Contenu du blink
 * @returns {string[]} - Tableau de noms de tags appropri√©s
 */
const getThematicTags = (contentType, content) => {
    const tagsByTheme = {
        tech: ['technologie', 'innovation', 'web', 'd√©veloppement', 'api'],
        lifestyle: ['lifestyle', 'voyage', 'food', 'fitness', 'mode'],
        culture: ['culture', 'art', 'musique', 'photographie', 'cr√©ativit√©'],
        business: ['business', 'startup', 'marketing', 'productivit√©'],
        nature: ['nature', 'environnement', '√©cologie', 'animaux'],
        general: ['inspiration', 'tips', 'tutorial', 'd√©couverte', 'partage']
    };

    let selectedTheme = 'general';

    // Logique simple pour d√©terminer le th√®me bas√© sur le type de contenu
    if (contentType === 'image') {
        const themes = ['culture', 'lifestyle', 'nature'];
        selectedTheme = themes[Math.floor(Math.random() * themes.length)];
    } else if (contentType === 'video') {
        const themes = ['culture', 'tech', 'lifestyle'];
        selectedTheme = themes[Math.floor(Math.random() * themes.length)];
    } else if (contentType === 'text') {
        // Pour le texte, on peut analyser le contenu (simplifi√©)
        const lowerContent = content.toLowerCase();
        if (lowerContent.includes('tech') || lowerContent.includes('code') || lowerContent.includes('dev')) {
            selectedTheme = 'tech';
        } else if (lowerContent.includes('business') || lowerContent.includes('startup')) {
            selectedTheme = 'business';
        } else {
            const themes = ['lifestyle', 'culture', 'general'];
            selectedTheme = themes[Math.floor(Math.random() * themes.length)];
        }
    }

    const themeTags = tagsByTheme[selectedTheme] || tagsByTheme.general;
    
    // Retourner 1-3 tags de ce th√®me
    const numTags = Math.floor(Math.random() * 3) + 1;
    const shuffled = themeTags.sort(() => 0.5 - Math.random());
    return shuffled.slice(0, numTags);
};

module.exports = {
    seedTags,
    getRandomTagsForBlink,
    getThematicTags
};

// Ex√©cuter le seeder si ce fichier est appel√© directement
if (require.main === module) {
    seedTags()
        .then(() => {
            console.log('‚úÖ Seeder des tags ex√©cut√© avec succ√®s');
            process.exit(0);
        })
        .catch((error) => {
            console.error('‚ùå Erreur lors de l\'ex√©cution du seeder:', error);
            process.exit(1);
        });
}
