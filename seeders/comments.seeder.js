// Importer les associations avant d'utiliser les mod√®les
require('../src/models/associations');

const { Comments, Blinks, Users } = require('../src/models/associations');
const CommentsService = require('../src/services/comments.service');

const commentsService = new CommentsService();

const seedComments = async () => {
    try {
        console.log('üó®Ô∏è D√©but du seeding des commentaires...');

        // R√©cup√©rer quelques blinks et utilisateurs existants
        const blinks = await Blinks.findAll({ limit: 5 });
        const users = await Users.findAll({ limit: 10 });

        if (blinks.length === 0) {
            console.log('‚ùå Aucun blink trouv√©. Veuillez d\'abord ex√©cuter le seeder des blinks.');
            return;
        }

        if (users.length === 0) {
            console.log('‚ùå Aucun utilisateur trouv√©. Veuillez d\'abord ex√©cuter le seeder des utilisateurs.');
            return;
        }

        console.log(`üìä ${blinks.length} blinks et ${users.length} utilisateurs trouv√©s`);

        const commentContents = [
            "Super blink ! J'adore ce contenu üòç",
            "Tr√®s int√©ressant, merci pour le partage !",
            "Excellent travail, continue comme √ßa üëè",
            "√áa me rappelle de bons souvenirs",
            "Magnifique ! O√π as-tu pris cette photo ?",
            "Trop dr√¥le üòÇüòÇüòÇ",
            "Merci pour cette inspiration !",
            "Wow, impressionnant !",
            "J'aimerais en savoir plus sur ce sujet",
            "Bravo pour cette r√©alisation !",
            "C'est exactement ce que je cherchais",
            "Tr√®s utile, je vais essayer √ßa",
            "Belle perspective sur le sujet",
            "√áa donne envie de voyager !",
            "Merci pour ce moment de d√©tente"
        ];

        let commentsCreated = 0;
        let commentsSkipped = 0;

        // Cr√©er des commentaires pour chaque blink
        for (const blink of blinks) {
            console.log(`\nüìù Cr√©ation de commentaires pour le blink ${blink.blinkID}...`);
            
            // S√©lectionner al√©atoirement 2-5 utilisateurs pour commenter ce blink
            const numComments = Math.floor(Math.random() * 4) + 2; // 2 √† 5 commentaires
            const shuffledUsers = users.sort(() => 0.5 - Math.random());
            const selectedUsers = shuffledUsers.slice(0, numComments);

            for (const user of selectedUsers) {
                try {
                    // V√©rifier si l'utilisateur a d√©j√† comment√© ce blink
                    const existingComment = await commentsService.getUserCommentForBlink(blink.blinkID, user.userID);
                    
                    if (existingComment) {
                        console.log(`‚ö†Ô∏è L'utilisateur ${user.userID} a d√©j√† comment√© le blink ${blink.blinkID}`);
                        commentsSkipped++;
                        continue;
                    }

                    // S√©lectionner un contenu de commentaire al√©atoire
                    const randomContent = commentContents[Math.floor(Math.random() * commentContents.length)];

                    // Cr√©er le commentaire
                    const comment = await commentsService.createComment(
                        blink.blinkID,
                        user.userID,
                        randomContent
                    );

                    console.log(`‚úÖ Commentaire cr√©√©: ${comment.commentID} par ${user.userID}`);
                    commentsCreated++;

                    // Petite pause pour √©viter de surcharger la base
                    await new Promise(resolve => setTimeout(resolve, 100));

                } catch (error) {
                    if (error.message && error.message.includes('AlreadyCommented')) {
                        console.log(`‚ö†Ô∏è L'utilisateur ${user.userID} a d√©j√† comment√© le blink ${blink.blinkID}`);
                        commentsSkipped++;
                    } else {
                        console.error(`‚ùå Erreur lors de la cr√©ation du commentaire pour ${user.userID} sur ${blink.blinkID}:`, error.message);
                    }
                }
            }
        }

        console.log('\nüìä R√©sum√© du seeding des commentaires:');
        console.log(`‚úÖ Commentaires cr√©√©s: ${commentsCreated}`);
        console.log(`‚ö†Ô∏è Commentaires ignor√©s (d√©j√† existants): ${commentsSkipped}`);
        console.log('üéâ Seeding des commentaires termin√© avec succ√®s !');

        // Afficher quelques statistiques
        const totalComments = await Comments.count();
        console.log(`üìà Total des commentaires en base: ${totalComments}`);

        // Afficher les blinks avec leurs nouveaux compteurs de commentaires
        const blinksWithComments = await Blinks.findAll({
            attributes: ['blinkID', 'commentCount'],
            where: {
                commentCount: { [require('sequelize').Op.gt]: 0 }
            }
        });

        console.log('\nüìä Blinks avec commentaires:');
        blinksWithComments.forEach(blink => {
            console.log(`  - Blink ${blink.blinkID}: ${blink.commentCount} commentaire(s)`);
        });

    } catch (error) {
        console.error('‚ùå Erreur lors du seeding des commentaires:', error);
        throw error;
    }
};

module.exports = seedComments;

// Ex√©cuter le seeder si ce fichier est appel√© directement
if (require.main === module) {
    seedComments()
        .then(() => {
            console.log('‚úÖ Seeder des commentaires ex√©cut√© avec succ√®s');
            process.exit(0);
        })
        .catch((error) => {
            console.error('‚ùå Erreur lors de l\'ex√©cution du seeder:', error);
            process.exit(1);
        });
}
