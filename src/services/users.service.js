const UsersRepository = require('../repository/users.repository');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const {sendEmail} = require('../core/emailService');
const profilesService = require("./profiles.service");

const UsersService = {

    async createUser({username, display_name, bio, email, password, name }) {
        // V√©rifier si l'utilisateur existe d√©j√†
        const existingUser = await UsersRepository.getUserByEmail(email);
        if (existingUser) {
            const error = new Error("Un utilisateur avec cet email existe d√©j√†");
            error.status = 409;
            throw error;
        }

        const hashedPassword = bcrypt.hashSync(password, 10);

        const newUser = await UsersRepository.createUser({
            email,
            password: hashedPassword,
            name,
            isVerified: false
        });

        await this.sendConfirmationEmail(newUser);
        await profilesService.createProfile(newUser.userID,username,display_name,bio,"https://i.pravatar.cc/64");

        return {
            message: "Utilisateur cr√©√© avec succ√®s, veuillez confirmer votre compte.",
            userID: newUser.userID
        };
    },

    async getAllUsers() {
        return await UsersRepository.getAllUsers();
    },

    async getUserById(userID) {
        const user = await UsersRepository.getUserById(userID);

        if (!user) {
            const error = new Error("Utilisateur non trouv√©");
            error.status = 404;
            throw error;
        }

        return user;
    },

    async getUserByEmail(email) {
        const user = await UsersRepository.getUserByEmail(email);

        if (!user) {
            const error = new Error("Utilisateur non trouv√©");
            error.status = 404;
            throw error;
        }

        return user;
    },

    async deleteUser(userID) {
        const user = await UsersRepository.getUserById(userID);
        if (!user) {
            const error = new Error("Utilisateur non trouv√©");
            error.status = 404;
            throw error;
        }

        await UsersRepository.deleteUser(userID);
    },

    async grantUser(req, userID) {
        if (!req.user || req.user.role !== 'admin') {
            throw new Error('Acc√®s refus√© : vous devez √™tre administrateur');
        }

        const user = await UsersRepository.getUserById(userID);
        if (!user) throw new Error('Utilisateur non trouv√©');

        if (user.role === 'admin') {
            throw new Error('Cet utilisateur est d√©j√† administrateur');
        }

        user.role = 'admin';
        await UsersRepository.updateUser(userID, { role: 'admin' });

        return { message: "L'utilisateur a √©t√© promu administrateur" };
    },

    async confirmUser(token) {
        try {
            const decoded = jwt.verify(token, process.env.JWT_SECRET);
            const user = await UsersRepository.getUserById(decoded.userID);

            if (!user) {
                const error = new Error("Utilisateur non trouv√©");
                error.status = 404;
                throw error;
            }

            if (user.isVerified) {
                const error = new Error("Compte d√©j√† v√©rifi√©");
                error.status = 400;
                throw error;
            }

            // Mise √† jour du statut de v√©rification
            await UsersRepository.updateUser(user.userID, { isVerified: true });

            return { message: "Compte v√©rifi√© avec succ√®s !" };
        } catch (error) {
            console.error("Erreur lors de la v√©rification du compte :", error.message);
            throw new Error("Lien de confirmation invalide ou expir√©");
        }
    },

    async updateUser(userID, updates) {
        const user = await UsersRepository.getUserById(userID);

        if (!user) {
            const error = new Error("Utilisateur non trouv√©");
            error.status = 404;
            throw error;
        }

        // V√©rifier si le mot de passe est √† mettre √† jour
        if (updates.password) {
            const bcrypt = require('bcryptjs');
            updates.password = bcrypt.hashSync(updates.password, 10);
        }

        // Met √† jour uniquement les champs fournis
        await UsersRepository.updateUser(userID, updates);

        return { message: "Utilisateur mis √† jour avec succ√®s" };
    },

    async sendConfirmationEmail(user) {
        try {
            const token = jwt.sign(
                { userID: user.userID },
                process.env.JWT_SECRET,
                { expiresIn: '1d' }
            );

            const confirmationUrl = `${process.env.BASE_URL || 'http://localhost:3011'}/users/confirm/${token}`;

            const subject = 'Confirmation de votre compte Blinker';
            const text = `Cliquez sur ce lien pour valider votre compte : ${confirmationUrl}`;
            const html = `
            <h1>Confirmation de votre compte</h1>
            <p>Cliquez sur <a href="${confirmationUrl}">ce lien</a> pour valider votre compte.</p>
        `;

            await sendEmail(user.email, subject, text, html);

            console.log(`üìß Email de confirmation envoy√© √† ${user.email}`);
        } catch (error) {
            console.error(`‚ùå Erreur lors de l'envoi de l'email √† ${user.email} :`, error.message);
            throw new Error('Impossible d‚Äôenvoyer l‚Äôemail de confirmation.');
        }
    },

    async requestPasswordReset(email) {
        try {
            const user = await UsersRepository.getUserByEmail(email);
            if (!user) {
                throw new Error("Utilisateur non trouv√©");
            }

            const token = jwt.sign(
                { userID: user.userID },
                process.env.JWT_SECRET,
                { expiresIn: "1h" }
            );

            const resetUrl = `${process.env.BASE_URL}/users/reset-password/${token}`;

            const subject = "R√©initialisation de votre mot de passe Blinker";
            const text = `Cliquez sur ce lien pour r√©initialiser votre mot de passe : ${resetUrl}`;
            const html = `
                <h1>R√©initialisation de votre mot de passe</h1>
                <p>Vous avez demand√© une r√©initialisation de votre mot de passe. Cliquez sur <a href="${resetUrl}">ce lien</a> pour d√©finir un nouveau mot de passe.</p>
                <p>Ce lien est valable pendant 1 heure.</p>
                <p>Si vous n'√™tes pas √† l'origine de cette demande, ignorez cet email.</p>
            `;

            await sendEmail(user.email, subject, text, html);

            console.log(`üìß Email de r√©initialisation envoy√© √† ${user.email}`);
        } catch (error) {
            console.error(`‚ùå Erreur lors de l'envoi de l'email √† ${user.email} :`, error.message);
            throw new Error("Impossible d‚Äôenvoyer l‚Äôemail de r√©initialisation.");
        }
    },

    async resetPassword(token, newPassword) {
        try {
            const decoded = jwt.verify(token, process.env.JWT_SECRET);
            const user = await UsersRepository.getUserById(decoded.userID);

            if (!user) {
                throw new Error("Utilisateur non trouv√©");
            }

            if (!newPassword || newPassword.length < 12 || !/[A-Z]/.test(newPassword) || !/[a-z]/.test(newPassword) || !/[0-9]/.test(newPassword) || !/[!@#$%^&*]/.test(newPassword)) {
                throw new Error("Le mot de passe doit contenir au moins 12 caract√®res, une majuscule, une minuscule, un chiffre et un symbole");
            }

            const hashedPassword = bcrypt.hashSync(newPassword, 10);

            await UsersRepository.updateUser(user.userID, { password: hashedPassword });

            return { message: "Mot de passe mis √† jour avec succ√®s" };
        } catch (error) {
            console.error("Erreur lors de la r√©initialisation du mot de passe :", error.message);
            throw new Error("Token invalide ou expir√©");
        }
    }
};

module.exports = UsersService;